---
AWSTemplateFormatVersion: '2010-09-09'
Description: GrassFormation test to create a complete Greengrass Stack
Parameters:
  GroupNameParameter:
    Type: String
    Description: "Name of the Greengrass Group"
  CoreShadowHandlerARN:
    Type: String
    Description: "The ARN of the lambda function that should handle the Core Shadow"
  CSRParameter:
    Type: String
    Description: "The Certificate Signing Request for the Core certificate"
  GFLambdaGroup:
    Type: String
    Description: "The ARN of lambda function responsible for creating GrassFormationGroup CloudFormation custom resources."
  GFLambdaCore:
    Type: String
    Description: "The ARN of lambda function responsible for creating GrassFormation CoreDefinition CloudFormation custom resources."
  GFLambdaResource:
    Type: String
    Description: "The ARN of lambda function responsible for creating GrassFormation ResourceDefinition CloudFormation custom resources."
  GFLambdaLogger:
    Type: String
    Description: "The ARN of lambda function responsible for creating GrassFormation LoggerDefinition CloudFormation custom resources."
  GFLambdaSubscription:
    Type: String
    Description: "The ARN of lambda function responsible for creating GrassFormation SubscriptionDefinition CloudFormation custom resources."

Resources:

  CoreCert:
    Type: AWS::IoT::Certificate
    Properties:
      CertificateSigningRequest: !Ref CSRParameter
      Status: ACTIVE

  CoreThing:
    Type: AWS::IoT::Thing
    Properties:
      ThingName: !Join ["_", [!Ref GroupNameParameter, "Core"]]

  CoreCertCoreThingAttachment:
    Type: AWS::IoT::ThingPrincipalAttachment
    Properties:
      Principal: !GetAtt CoreCert.Arn
      ThingName: !Ref CoreThing

  CorePolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyName: !Join ["_", [!Ref GroupNameParameter, "Policy"]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: ["iot:Publish", "iot:Subscribe", "iot:Connect", "iot:Receive"]
          Resource: "*"
        - Effect: Allow
          Action: ["iot:GetThingShadow", "iot:UpdateThingShadow", "iot:DeleteThingShadow"]
          Resource: "*"
        - Effect: Allow
          Action: ["greengrass:*"]
          Resource: "*"

  CoreCertCorePolicyAttachment:
    Type: AWS::IoT::PolicyPrincipalAttachment
    Properties:
      Principal: !GetAtt CoreCert.Arn
      PolicyName: !Ref CorePolicy

  CoreDefinition:
    Type: Custom::GrassFormationCoreDefinition
    Properties:
      ServiceToken: !Ref GFLambdaCore
      Name: !Join ["_", [!Ref GroupNameParameter, "Core"]]
      Cores:
      - CertificateArn: !GetAtt CoreCert.Arn
        Id: !Ref CoreThing
        SyncShadow: true
        ThingArn: !Join ["", ["arn:", !Ref "AWS::Partition", ":iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":thing/", !Ref CoreThing]]

  ResourceDefinition:
    Type: Custom::GrassFormationResourceDefinition
    Properties:
      ServiceToken: !Ref GFLambdaResource
      Name: !Join ["_", [!Ref GroupNameParameter, "Resources"]]
      Resources:
      - Id: !Join ["_", [!Ref GroupNameParameter, "Resource", "videoDevice"]]
        Name: "videoDevice"
        ResourceDataContainer:
          LocalDeviceResourceData:
            GroupOwnerSetting:
              AutoAddGroupOwner: true
            SourcePath: "/dev/video0"
      - Id: !Join ["_", [!Ref GroupNameParameter, "Resource", "videoCoreInterface"]]
        Name: "videoCoreInterface"
        ResourceDataContainer:
          LocalDeviceResourceData:
            GroupOwnerSetting:
              AutoAddGroupOwner: true
            SourcePath: "/dev/vchiq"
      - Id: !Join ["_", [!Ref GroupNameParameter, "Resource", "videoCoreSharedMemory"]]
        Name: "videoCoreSharedMemory"
        ResourceDataContainer:
          LocalDeviceResourceData:
            GroupOwnerSetting:
              AutoAddGroupOwner: true
            SourcePath: "/dev/vcsm"
      - Id: !Join ["_", [!Ref GroupNameParameter, "Resource", "GStreamerKVSPlugingPath"]]
        Name: "GStreamerKVSPlugingPath"
        ResourceDataContainer:
          LocalVolumeResourceData:
            GroupOwnerSetting:
              AutoAddGroupOwner: true
            SourcePath: "/home/pi/opt/amazon-kinesis-video-streams-producer-sdk-cpp/kinesis-video-native-build/downloads/local/lib"
            DestinationPath: "/kvs/local/lib"

  LoggerDefinition:
    Type: Custom::GrassFormationLoggerDefinition
    Properties:
      ServiceToken: !Ref GFLambdaLogger
      Name: !Join ["_", [!Ref GroupNameParameter, "Loggers"]]
      Loggers:
      - Type: FileSystem
        Component: GreengrassSystem
        Level: INFO
        Space: 25600
        Id: !Join ["_", [!Ref GroupNameParameter, "Logger", "FileSystem", "GreengrassSystem"]]
      - Type: FileSystem
        Component: Lambda
        Level: WARN
        Space: 25600
        Id: !Join ["_", [!Ref GroupNameParameter, "Logger", "FileSystem", "Lambda"]]
      - Type: AWSCloudWatch
        Component: Lambda
        Level: WARN
        Id: !Join ["_", [!Ref GroupNameParameter, "Logger", "AWSCloudWatch", "Lambda"]]

  SubscriptionDefinition:
    Type: Custom::GrassFormationSubscriptionDefinition
    Properties:
      ServiceToken: !Ref GFLambdaSubscription
      Name: !Join ["_", [!Ref GroupNameParameter, "Subscriptions"]]
      Subscriptions:
        - Id: !Join ["_", [!Ref GroupNameParameter, "Subscription", "Shadow", "Lambda"]]
          Source: GGShadowService
          Target: !Ref CoreShadowHandlerARN
          Subject: !Join ["/", ["$aws/things", !Ref CoreThing, "shadow/update/delta"]]

  GreengrassGroup:
    Type: Custom::GrassFormationGroup
    Properties:
      ServiceToken: !Ref GFLambdaGroup
      Name: !Ref GroupNameParameter
      CoreDefinitionVersionArn: !GetAtt CoreDefinition.LatestVersionArn
      ResourceDefinitionVersionArn: !GetAtt ResourceDefinition.LatestVersionArn
      LoggerDefinitionVersionArn: !GetAtt LoggerDefinition.LatestVersionArn
      SubscriptionDefinitionVersionArn: !GetAtt SubscriptionDefinition.LatestVersionArn
